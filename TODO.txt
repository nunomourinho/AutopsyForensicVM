SNAPSHOTS
---> Create a new webservice that deletes a shapshot. Only the snapshots not referenced should be deleted. The first snapshot should not be deleted

{ "execute": "human-monitor-command",
     "arguments": { "command-line": "delvm first" } }


MEMORY
---> Create webservice that reads memory size from script file
---> Create the fields in the interface needed to resize the virtual forensic analysis drive (size)
---> Create a button that changes the memory of the vm on the script

WIRESHARK NETWORK CARD
---> Create a webservice that adds a new network card that records network trafic
---> Create a new webservice that disables this network card, and downloads the wireshark file

SIMPLE NETWORK CARD
---> Create a webservice that adds a new network card
---> Create a new webservice that removes a network card

RECORD VIDEO
---> Create a webservice that records video
---> Create a webservice that stops video recording
---> Create a webservice that saves the video file

AUTHENTICATION
---> Multifactor autentication: https://django-two-factor-auth.readthedocs.io/en/stable/index.html
---> Authentication: Integrate with google authentication. Use this link as a reference:
https://www.section.io/engineering-education/django-google-oauth/


NOVNC BUTTONS:
---> Change webservices to support autentication of a logged user (called from webpage)
---> Create ajax client to shutdown machine and change noVNC button actions

SNAP MODE: Run a machine in snap mode:
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
---> Change forensic2v script so that in the snap mode it creates a new script file with mount script to mount the dd, efw or
aff forensic image

---> Create a new webservice that mounts a folder inside the other folder
---> Change the webservice to also mount the original forensic image

---> Sequence to run: Determine free port on server, Create ssh connection with port redirect to samba port, mount samba share on mnt folder, mount image on efw or aff folder via script,      run the machine
---> Sequence to stop. Stop the machine, umount aff, umount mnt, terminate samba session
---> Create a new webservice that umounts a folder
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

---> BUG Correction: Test network insert in several OS

---> Create a new webservice that lists the machines available.

---> Reorganize project: Create a folder with the external bin files, create a folder for config files, change code accordingly

---> Make adicional comments and code documentation


---> BONUS: Authentication: Integrate with autenticacao.gov (Portugal)

---> Create function to list and delete shares

AUTOMATED MALWARE DETECTION:
---> Detect malware (memory or others-Yara RULES or Others)
(Idea: Use alien vault pulses to detect malware. Use tor exit nodes to detect hidden channels)
Sources: 
https://github.com/abusech/YARAify ---> Python examples to find malware from md5, sha1, sha256 hashs
https://abuse.ch/ ---> API to search malware samples. It also allows to download malware samples (bad idea)
https://github.com/OpenCTI-Platform/opencti ---> Investigate
https://www.filigran.io/en/solutions/products/opencti/ --> Investigate
https://www.misp-project.org/ ---> Threat sharing plataform
https://www.misp-project.org/feeds/ ---> Feeds that base of this project
https://github.com/AlienVault-OTX/OTX-Python-SDK/blob/master/examples/is_malicious/is_malicious.py --> How using the api one can check if the file is malicious
https://www.dan.me.uk/ ---> Ip addresses that sould be blocked
